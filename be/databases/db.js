//import mongoose from "mongoose";
import client from "../mqtt/mqttClient.js";
//import sensorSchema from "./schemaData.js";
import { getTodayCollectionModel } from "./checkCollections.js"; // ‚úÖ import h√†m ki·ªÉm tra collection
import mongoose from "mongoose";
import { checkMongoConnection } from "./checkConnection.js";
import sensorSchema from "./schemaData.js";
import { cacheModels } from "./cache.js";
const uri = "mongodb+srv://thanh551419a:tPDYsc1H3Ab7kvmy@cluster0.dw9comk.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0";

mongoose.connect(uri)
  .then(() => {
    console.log("‚úÖ Connected to MongoDB");
    checkMongoConnection(); // üîç Ki·ªÉm tra ngay sau khi k·∫øt n·ªëi
  })
  .catch(err => console.error("‚ùå MongoDB connection error:", err));


// üöÄ Khi MQTT broker k·∫øt n·ªëi th√†nh c√¥ng
client.on("connect", async () => { // ‚úÖ th√™m async ·ªü ƒë√¢y
  console.log("‚úÖ Connected to MQTT broker");
  // L·∫Øng nghe d·ªØ li·ªáu t·ª´ topic "sensor/data"
 
  try {
    // ‚úÖ Ki·ªÉm tra ho·∫∑c t·∫°o collection cho ng√†y hi·ªán t·∫°i
    // Ki·ªÉm tra ƒë√£ c√≥ Coleection h√¥m nay ch∆∞a, n·∫øu ch∆∞a th√¨ t·∫°o m·ªõi 
    const SensorModel = await getTodayCollectionModel();

    console.log("üìò Collection model s·∫µn s√†ng:", SensorModel.collection.name);
    // ƒê·ªçc d·ªØ li·ªáu t·ª´ MQTT topic
    console.log("‚úÖ ƒê√£ subscribe v√†o t·∫•t c·∫£ c√°c topic");
    // ‚úÖ L∆∞u th·ª≠ 1 b·∫£n ghi v√†o collection ng√†y h√¥m nay
    //console.log("üíæ D·ªØ li·ªáu test ƒë√£ ƒë∆∞·ª£c l∆∞u th√†nh c√¥ng!");
  } catch (err) {
    console.error("‚ùå L·ªói khi thao t√°c v·ªõi collection:", err);
  }
});
client.on("message" , async (topic, message) => {
    try {
    const value = message.toString().trim();

   // üìä Ph√¢n lo·∫°i d·ªØ li·ªáu theo topic
   let temp = "";
if (topic === "esp32/dht/temperature") {
  console.log(parseFloat(value));
} 
else if (topic === "esp32/dht/humidity") {
  console.log(parseFloat(value));
} 
else if (topic === "esp32/ldr/value") {
  console.log(parseInt(value));
}
if (topic === "esp32/device/led/1") {
  temp += value;
}
else if (topic === "esp32/device/led/2") {
  temp += value;
}
else if (topic === "esp32/device/led/3") {
  temp += value;
}
console.log(temp);
  } catch (err) {
    console.error("‚ùå L·ªói khi x·ª≠ l√Ω d·ªØ li·ªáu MQTT:", err);}
});

export default client;
